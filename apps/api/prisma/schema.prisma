generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  uid               String   @id @default(cuid())
  firstName         String   @db.VarChar(50)
  lastName          String   @db.VarChar(50)
  gender            String
  birthDate         DateTime
  phoneNumber       String?  @db.VarChar(16)
  email             String   @db.VarChar(50)
  password          String
  verified          Boolean  @default(false)
  roleId            Int
  emailNotification Boolean?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  role Role @relation(fields: [roleId], references: [id])

  organizer   Organizer?    @relation()
  MyTicket    MyTicket[]
  Review      Review[]
  Transaction Transaction[]
  Referral    Referral[]

  @@map("users")
}

model Location {
  id       Int    @id @default(autoincrement())
  venue    String @db.VarChar(50)
  city     String @db.VarChar(50)
  address  String @db.LongText
  regionId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  region Region @relation(fields: [regionId], references: [id])

  Event Event[]

  @@map("locations")
}

model Region {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Location Location[]

  @@map("regions")
}

model Organizer {
  userId      String @id
  name        String
  email       String
  phoneNumber String

  user  User    @relation(fields: [userId], references: [uid])
  event Event[]

  @@map("organizers")
}

model Event {
  id          Int    @id @default(autoincrement())
  title       String @db.VarChar(50)
  details     String @db.LongText
  organizerId String
  locationId  Int
  genreId     Int

  salesPeriodStart DateTime?
  salesPeriodEnd   DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  organizer Organizer @relation(fields: [organizerId], references: [userId])
  genre     Genre     @relation(fields: [genreId], references: [id])
  location  Location  @relation(fields: [locationId], references: [id])

  EventPicture EventPicture[]
  Review       Review[]
  EventTicket  EventTicket[]
  Transaction  Transaction[]
  Coupon       Coupon[]
  Schedule     Schedule[]

  @@map("events")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Event  Event[]
  Coupon Coupon[]

  @@map("genres")
}

model EventPicture {
  id      Int    @id @default(autoincrement())
  eventId Int
  link    String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event @relation(fields: [eventId], references: [id])

  @@map("eventpictures")
}

model Review {
  id         Int    @id @default(autoincrement())
  eventId    Int
  customerId String
  comment    String
  rating     Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  customer User  @relation(fields: [customerId], references: [uid])
  event    Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

model Schedule {
  id        Int      @id @default(autoincrement())
  eventId   Int
  startDate DateTime
  endDate   DateTime
  startTime DateTime
  endTime   DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event @relation(fields: [eventId], references: [id])

  EventTicket EventTicket[]

  @@map("schedules")
}

model MyTicket {
  id            String    @id @default(cuid())
  customerId    String
  EventTicketId Int
  expiryDate    DateTime
  redeemedDate  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  customer    User        @relation(fields: [customerId], references: [uid])
  eventTicket EventTicket @relation(fields: [EventTicketId], references: [id])

  @@map("mytickets")
}

model EventTicket {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(50)
  details    String     @db.LongText
  eventId    Int
  scheduleId Int
  className  String     @db.VarChar(50)
  price      Int
  type       TicketType
  totalQty   Int
  qty        Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event    Event    @relation(fields: [eventId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  MyTicket    MyTicket[]
  Transaction Transaction[]

  @@map("eventtickets")
}

model Transaction {
  id                 Int    @id @default(autoincrement())
  eventId            Int
  ticketId           Int
  customerId         String
  paymentMethod      String @db.VarChar(50)
  totalPrice         Int
  totalDiscount      Int?
  couponId           Int?
  totalPointsUsed    Int?
  taxPercentage      Int?
  totalTax           Int?
  totalPriceAfterCut Int
  ticketQty          Int
  statusId           Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event       Event             @relation(fields: [eventId], references: [id])
  eventTicket EventTicket       @relation(fields: [ticketId], references: [id])
  customer    User              @relation(fields: [customerId], references: [uid])
  coupon      Coupon?           @relation(fields: [couponId], references: [id])
  status      TransactionStatus @relation(fields: [statusId], references: [id])

  @@map("transactions")
}

model TransactionStatus {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Transaction Transaction[]

  @@map("transactionstatuses")
}

model Coupon {
  id                      Int      @id @default(autoincrement())
  name                    String   @db.VarChar(50)
  details                 String   @db.LongText
  code                    String   @unique
  discountPercentage      Float?
  priceCut                Float?
  includedEventId         Int?
  includedEventCategoryId Int?
  activeDate              DateTime
  expirationDate          DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event? @relation(fields: [includedEventId], references: [id])
  genre Genre? @relation(fields: [includedEventCategoryId], references: [id])

  Transaction Transaction[]
  Referral    Referral[]

  @@map("coupons")
}

model Referral {
  id             Int      @id @default(autoincrement())
  customerId     String
  couponId       Int
  expirationDate DateTime
  totalPoints    Int      @default(0)
  totalTimesUsed Int      @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  customer User   @relation(fields: [customerId], references: [uid])
  coupon   Coupon @relation(fields: [couponId], references: [id])

  @@map("referals")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User[]

  @@map("rolas")
}

enum TicketType {
  PHYSICAL
  DIGITAL
}
